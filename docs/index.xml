<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Engineering-Playbook</title><link>https://805th-Shoc.github.io/docs/</link><description>Recent content in Docs on Engineering-Playbook</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://805th-Shoc.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://805th-Shoc.github.io/docs/compliance/ato-document-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/compliance/ato-document-templates/</guid><description>ATO Document Templates If you find yourself on a project where you might need an ATO, you should familiarize yourself with these documents. While every Agency has slightly different templates and workflows, using this will set you up for success.
Privacy Impact Assessment FIPS 199 Security Categorization Digital Identity Acceptance Statement Security Assessment Report Configuration Management Plan FIPS 199 Low Security Plan FIPS 199 Moderate Security Plan FIPS 199 High Security Plan</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/best-practices-for-submitting-pull-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/best-practices-for-submitting-pull-requests/</guid><description>Best Practices for Submitting a Pull Request # Generally, a best practice to engage in before submitting your own pull request is to do a code review on your work.
Prior to submitting a PR, review your code for the following characteristics:
Is the code READABLE? Is it well-organized? Are the class, variable, and method names clear and descriptive? Are the formatting, spacing, comments, and indentations consistent? Have you refactored the code to reduce repetition and nested code?</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/bugs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/bugs/</guid><description>Defects/Bugs # Overview # How to manage bugs/defects. Tracking tools and integrating bug fixing into the regular development cycle.
Contents # Add some stuff here</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/code-reviews/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/code-reviews/</guid><description>Code Reviews # Overview # Effective code reviews provide some of the best opportunities for learning, gaining valuable feedback from peers, ensuring that quality standards are upheld throughout a project, and defects are caught as early as possible.
We recognize code reviews can be a vulnerable exercise and should be approached with care and deliberate intention. We&amp;rsquo;ve collected some of the best practices for projects to systematize the code review process and lay out expectations for the creator of the pull request as well as the role of the reviewer.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/configuration/</guid><description>Configuration # Projects should adhere to the following guidelines for managing configuration:
Configuration values should be provided to programs via environment variables.
Programs should validate configuration immediately when they are run.
If config is incomplete or invalid, programs should:
Exit with a non-zero status Print a helpful error message to assist humans in resolving the issue All environment values should be cataloged in a single location.
This should generally be a project&amp;rsquo;s .</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/development-cycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/development-cycle/</guid><description>Development Cycle # Overview # We practice agile with a small &amp;ldquo;a&amp;rdquo;. This means getting back to the basics of what it means to develop software with agility:
Find out where you are Take a small step towards your goal Adjust your understanding based on what you learned Repeat In order to implement these principles, we do a few things:
Planning and executing tasks in repeated cycles, called Sprints At the end of each cycle, we review our work and whether or we accomplished what we set out to do.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/docker/</guid><description>Docker # Overview # Docker is useful because it allows you to both package and run software with all its dependencies and configuration in isolation. It also allows you (in theory) to have the same environment in development as in CI and production.
Installation # You should install via homebrew
brew cask install docker Configuration of Shared Folders # Anecdata suggests that removing some of the default shared folders can decrease CPU usage.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/editors-ides-debuggers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/editors-ides-debuggers/</guid><description>Editors, IDEs and Debuggers # Overview # We don&amp;rsquo;t care which editor/IDE/debugger that you use - it&amp;rsquo;s your workflow. That said, we do think there is enormous value to be had from a well configured working environment that leverages available tooling. For example, knowing how to use some form of debugger will significantly improve your productivity and reduce the daily frustrations of developing code.
In this section you will find overviews of the range of tools to use and suggestions on how best to configure each tool for the situations we most often use them.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/great-code-brings-happiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/great-code-brings-happiness/</guid><description>Great Code Reviews Bring Happiness to my Heart # So you&amp;rsquo;ve put together the perfect changeset. You use your favorite tool to share your changes and ask politely for a code review.
How do you make that code review great? # Making code review process work for your team We&amp;rsquo;ve all been on teams large and small that have tried to integrate code review into their process. Some of those teams succeeded, and others failed.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/growth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/growth/</guid><description>Growth # Overview # When working on a project, it&amp;rsquo;s important to allow time for career growth. Folks will have different levels of experience and will need to explore areas that are not directly related to completing project work.
We experience that this exploration winds up benefiting the client in the long run, both through immediate impact (e.g. speeding up tests) and the client getting the benefit of learning that happened elsewhere.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/health-checks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/health-checks/</guid><description>Health Checks # Overview # In modern API services, it is not uncommon to build and rely upon Healthcheck endpoint(s). These endpoints are generally orthogonal to the operating business logic of the service, and are intended to be consumed by the Operators of the system (e.g. InfraSec practitioners).
There are many ways that Healthcheck endpoints can be used in a system:
Readiness - Upon startup, has my app warmed up any internal caches that are needed before it can respond to traffic?</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/intro-to-ci-cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/intro-to-ci-cd/</guid><description>Intro to CI/CD # The goal of CI/CD practice is to provide a workflow that can support frequent updates, good testing, consistent builds, and prompt deploys. Additionally issues with code should be found quickly and addressed before it is released to customers.
Delivery Pipeline Basics # There are usually four conceptual steps in a delivery pipeline:
Build: Where you build the code into a binary or other artifacts to eventually distribute.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-golang/</guid><description>Go # Overview # Go (a.k.a. Golang) is a programming language designed by folks at Google.
This guide provides some general resources for working in Go. Web Application in Go provides some specifics to web development.
Learning Resources # References # The Go Programming Language Official Website Effective Go (how to do things “the Go way”) Go Pointer Primer pkg.go.dev (where you can read the docs for nearly any Go package) Go wiki Book: The Go Programming Language Advanced Testing with Go Video and Article (great overview of useful techniques, useful for all Go programmers) Go Proverbs Line of Sight Go Go for Industrial Programming Tours/Lessons # A Tour of Go (in-browser interactive language tutorial) How to Write Go Code (info about the Go environment, testing, etc.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-python-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-python-installation/</guid><description>Installation # Python # Use Python 3.
Use brew in order to keep Python up to date. Install the latest version like so:
brew install python Pipenv # If you also need a local Python development environment, we recommend using pipenv to provide a virtual environment. Install it using homebrew:
brew install pipenv To create a local development environment and a Pipfile, specify the specific python interpreter to use:</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-python-linters-checkers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-python-linters-checkers/</guid><description>Linters and Checkers # We recommend using flake8 as a linter and black for formatting.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-python-project-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-python-project-setup/</guid><description>Project Setup # Layout # These recommendations are based on this article, updated to reflect the use of Pipenv.
Simple project # .gitignore README.md LICENSE Pipfile Pipfile.lock sample.py # module lives in a single file tests/test_sample.py Application or larger project # .gitignore README.md LICENSE Pipfile Pipfile.lock sample/__init__.py sample/*.py # module lives in a directory docs/ tests/test_*.py Library # Packaging a python library
.gitignore # We suggest copying this Python-specific .</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-python/</guid><description> Overview # Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python&amp;rsquo;s design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.
Contents # Installation Linters and Checkers Project Setup</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-ruby/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-ruby/</guid><description/></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages-shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages-shell/</guid><description>Shell programming # Overview # Best practices tl;dr:
Think hard before using bash. Something else is often better. For portability, dash provides a minimal POSIX shell feature set. For complicated tasks, a more modern language like Go or Python may be more reliable and easy to maintain. Use shellcheck Don&amp;rsquo;t copy &amp;amp; paste code from Google or StackExchange unless you fully understand it Keep your bash version up to date with your package manager (e.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/programming-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/programming-languages/</guid><description>Programming Languages # Overview # This section will contain our collective observations about the strengths and challenges offered up by many of the different programming languages out there.
While we may have opinions on particular languages and strategic reasons for investing in some languages over others, we recognize that our clients will may make different choices for different reasons. As such, Rhinos should aim to be proficient in more than one language and able to get by with several.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/source-control-master-main/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/source-control-master-main/</guid><description>Master to Main branch rename # These instructions will help moving repos from using the default branch name master and modify it to be main.
Prereqs # First, ensure that the version of git that you have installed is at least v2.28.0. This is important to ensure you have access to the init.DefaultBranch setting in the git config file.
Instructions to change default branch name # To update the branch name use the npm tool lgarron/main-branch:</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/source-control-repos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/source-control-repos/</guid><description>Git Repos # This page provides guidance on how to set up and manage your Git repos. For Rhinos, most of these will be kept in GitHub, so much of this advice will be geared specifically to managing GitHub repositories.
Setting Up Repositories # We try to manage our Git repositories with Terraform as much as possible. However, we haven&amp;rsquo;t had great luck creating repos with Terraform, so what we do is create the repo manually in GitHub, then import it into Terraform.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/source-control-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/source-control-tools/</guid><description>Tools # This page provides a summary of tools we commonly use for source control.
Git # Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
Use your work email when making commits to our repositories. The simplest path to correctness is setting global config:
git config --global user.email &amp;#34;username@domain&amp;#34; git config --global user.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/source-control-workflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/source-control-workflows/</guid><description>Git Workflow # We&amp;rsquo;ve tried to come up with some standardized workflows for working with Git. This page hopes to capture them so that new Trussels can work cleanly with other developers and minimize friction.
Branching Strategy # There are several well-established branching strategies and workflows out there. This article covers four leading types.
Each project will have its own requirements, and sometimes even individual projects might need different approaches, but generally SHOC recommends the &amp;ldquo;GitHub Flow&amp;rdquo;, for its lightweight process and ease of use with CI/CD.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/source-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/source-control/</guid><description>Source Control # Overview # Source control has less to do with the VCS system you use, and more to do with the stages code goes through on the journey from inside a developer&amp;rsquo;s head, tested and merged into the main line, deployed to production, and thence in time to being identified as that accursed legacy system that is causing all the problems.
Most of our projects will use Git as their VCS, and usually with GitHub as the host for their repositories, but this is not a hard and fast rule (clients will often host their own repositories in their own system).</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/standard-delivery-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/standard-delivery-pipeline/</guid><description>Standard Delivery Pipeline # The following is a standardized workflow for developing and deploying our code using CI/CD. This is meant to be an example, not a prescriptive ideal; if your project needs to use a different workflow, that&amp;rsquo;s fine. Your goal should still be to provide a workflow that can support frequent updates, good testing, and prompt deploys.
Developing Your Code # We generally use Git for our code repository, and Github more specifically.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/develop/tools-and-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/tools-and-practice/</guid><description>Tools and Practice # Overview # This section addresses the tools and practices which are part of the everyday habits of being a Software Engineer at the 805th. If you&amp;rsquo;d like to get a sense for how Rhino&amp;rsquo;s solve problems, take a look at the 🔒 interview solutions repo. If you haven&amp;rsquo;t already, post your solution!
SHOC aims to find a balance between giving the autonomy and tools to make the best choices in any given situation, but to also avoid revisiting the same questions again and again.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/documentation/external-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/documentation/external-resources/</guid><description> External Resources # This is a list of articles and talks that have influenced the advice in this section; you may find it useful to read or view these if you&amp;rsquo;re especially interested in this topic.
Articles # 10 Tips For Making Your Documentation Crystal Clear, Ben Cotton A Primer on Documentation Content Strategy, Stephanie Blotner What to Write and Technical Style, Jacob Kaplan-Moss Yelp Production Engineering Documentation Style Guide, Chastity Blackwell Content debt: What it is, where to find it, and how to prevent it in the first place, Melody Kramer Keep Refining, 18F Talks # The 7 Deadly Sins of Documentation, Chastity Blackwell Scalable Meatfrastructure, Alice Goldfuss Traps and Cookies: A Mystery Package From Your Former Self, Tanya Reilly</description></item><item><title/><link>https://805th-Shoc.github.io/docs/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/infrastructure/</guid><description/></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/accessibility-standards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/accessibility-standards/</guid><description>What is accessibility? # Accessibility (also abbreviated as a11y) is making sure that the greatest number of users are able to access and use your product.
Accessibility is inclusion # Accessibility is not just making sure that a web application is usable by those with physical limitations. While it is very important for those that rely on screen readers and other assistive devices to be able to use the application, other limiting factors can include: type of device, language, content, bandwidth, etc.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/agile-project-beta-phase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/agile-project-beta-phase/</guid><description>How the beta phase works # The beta phase is where you take your best idea from prototyping and start building it for real. It also involves thinking about how your service will integrate with (or start to replace) existing services, and preparing for the transition to live.
Structure your beta phase so you can roll out the service to real users - while minimizing risk and maximizing the potential to learn and iterate the service.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/agile-project-go-live/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/agile-project-go-live/</guid><description>How to Go Live # Things to pay attention to when going live # Before the service moves into the live phase, you’ll need to show that you’ve used the beta phase to build a service that meets the needs you identified at discovery and prototyping, testing, and iterating based on what you learn.
This should be coordinated with the client organization to decide what is required to release the software to all users.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/agile-project-hand-off/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/agile-project-hand-off/</guid><description>Handing Off Your Service # Most commonly, client engagements end when a contract finishes with no renewal. When a this happens, it’s important to follow a set of guidelines to properly support users, set up new service teams for success, and close the client relationship amicably. This section contains some guidelines for how you can make that happen successfully.
Supporting the users # Making sure the users are supported through transition is the top priority when handing off.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/agile-project-prototyping-phase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/agile-project-prototyping-phase/</guid><description>How the Prototyping Phase Works # Prototyping is where you try out different solutions to the problems you learned about during discovery. Prototyping is done using the steel cable work as a foundation.
Spend this phase building prototypes and testing different ideas. And do not be afraid to challenge the way things are done at the moment: this is a chance to explore new approaches.
You do not have to prototype the user’s entire wider journey.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/definition-of-done/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/definition-of-done/</guid><description>Definition of Done # The definition of done (DoD) is when all conditions, or acceptance criteria, that a software product must satisfy are met and ready to be accepted by a user, customer, team, or consuming system.
Product Plan A definition of done can be written for a user story, task, or bug.
Why it’s important # The definition of done is a tool we use to ensure consistent, high-quality work; and help the team decide when we have finished a piece of work and can move on to the next thing.</description></item><item><title/><link>https://805th-Shoc.github.io/docs/project_management/the-steel-cable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/the-steel-cable/</guid><description>The Steel Cable # a.k.a. spanning cable, guide wire, tracer bullet
Imagine you are standing on one side of a canyon looking over at the other. We need to eventually move a lot of things across that gap, and we’re tempted to start thinking about the grand bridge that will move passenger cars, freight trucks… or maybe even a train! But first, we want to figure out how to string one solitary steel cable across the canyon.</description></item><item><title>Architectural Decision Records</title><link>https://805th-Shoc.github.io/docs/documentation/adr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/documentation/adr/</guid><description>Archetectural Decision Records # The 805th SHOC uses archetectural decision records(ADRs) to document engineering decisions. These include choices about composition of the tech stack, using one module or library over others, infrastructure, features, etc. &amp;ldquo;Architectural&amp;rdquo; should be interpreted broadly: any decision that could impact the project at the archectural level is a candidate or an ADR.
ADRs are useful for recording context with decisions that may become unclear over time, or as engineers rotate on and off the project.</description></item><item><title>Authorization to Operate</title><link>https://805th-Shoc.github.io/docs/compliance/authorization-to-operate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/compliance/authorization-to-operate/</guid><description>Authorization to Operate (ATO) # The Official management decision given by a senior organizational official to authorize operation of an information systems and to explicitly accept the risk to organizational operations (including mission, functions, image, or reputation), organizational assets, individuals, other organizations, and the Nation based on the implementation of an agreed-upon set of security controls.
ATO Overview # Every federal information system must go through NIST&amp;rsquo;s Risk Management Framework (RMF) before it can be used to process federal information.</description></item><item><title>direnv</title><link>https://805th-Shoc.github.io/docs/develop/direnv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/develop/direnv/</guid><description>direnv # Overview # direnv is an MIT-licensed command-line tool that addresses the hassle of setting per-project environment variables.
Installation # Via homebrew:
brew install direnv Getting started # Create an .envrc file in a directory with some environment variables your project needs:
$ cat &amp;lt;&amp;lt;ENVRC &amp;gt; .envrc export DB_HOST=localhost export DB_PORT=5432 export DB_USER=postgres export DB_PASSWORD=mysecretpassword export DB_NAME=dev_db CLIENT_AUTH_SECRET_KEY=$(&amp;lt;client_auth_secret.key) ENVRC $ On first run, you should get a message indicating that you will have to explicitly authorize direnv to load the file:</description></item><item><title>Discovery Phase</title><link>https://805th-Shoc.github.io/docs/project_management/agile-project-discovery-phase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/agile-project-discovery-phase/</guid><description>Discovery Phase # Before you commit to building a product or service, the team needs to understand the problem that needs to be solved and who it needs to be solved for.
That means learning about:
who your various sets of users are - for example, a business stakeholder who is receiving the data processed by your tool, which is owned by the inventory team your users and their goals the underlying policy intent you’ve been set up to address - commonly, the client’s contract objectives constraints you may face making changes to how the product or service is run - for example, because of technology or legislation what work has been done before - for example, has there been research into this problem space before?</description></item><item><title>Information Security and Federal Compliance</title><link>https://805th-Shoc.github.io/docs/compliance/information-security-and-federal-compliance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/compliance/information-security-and-federal-compliance/</guid><description>Information Security and Federal Compliance # The Federal Information Security Management Act (FISMA) was passed in 2002 and made a requirement for federal agencies to impliment cybersecurity programs to protect systems and information. FISMA requires federal agencies to create and embed IT security plans, including policies for the IT risk assessment. Fisma applies to federal informationsystems and networks but also information assets that are processed or managed by government contractors, and subcontractors too.</description></item><item><title>Introduction to Documentation</title><link>https://805th-Shoc.github.io/docs/documentation/introduction-to-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/documentation/introduction-to-documentation/</guid><description>Introduction to Documentation # Documentation is a key part of any sowftware project, but it&amp;rsquo;s often something that many engineers struggle with even when we recognize its importance. Writing well is just as difficult whether it is code or docs, and both require deliberate effort in order to hone your skills.
Documentation has a positive feedbackloop &amp;ndash; if you have documentation that is well-written, provides real value, and is easy to find, you&amp;rsquo;re much more likely to have people work to keep it acurate and upto date.</description></item><item><title>Phases of an Agile Project</title><link>https://805th-Shoc.github.io/docs/project_management/phases-of-an-agile-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/project_management/phases-of-an-agile-project/</guid><description>Phases of an agile project # Two horizontal sections. The top section, green, labeled &amp;ldquo;discovery track&amp;rdquo;. The bottom section, blue, labeled &amp;ldquo;delivery track&amp;rdquo;. Each with a row of counterclockwise circles pointing to each other.
There are two tracks of the agile project: discovery and delivery. Workflows are handed between these two phases as insights are gained and software is delivered. Within each track are phases, which occur in repeated cycles.</description></item><item><title>Risk Management Framework</title><link>https://805th-Shoc.github.io/docs/compliance/risk-management-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://805th-Shoc.github.io/docs/compliance/risk-management-framework/</guid><description>Risk Management Framework (RMF) # For all federal agencies, the Risk Management Framework (RMF) describes the process that must be followed to se cure, authorize, and manage information systems. The RMF defines a process cycle that is used for initially securing the protection of systems through an Authorization to Operate (ATO) and integrating ongoing monitoring.
Adopting the Risk Management Framework # The risk management framework is a framework, not a policy.</description></item></channel></rss>